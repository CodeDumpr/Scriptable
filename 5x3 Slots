// Jokerr's Scriptable Slot Machine (Centered Grid, Standard Emoji Size)

const saveKey = "slot_data";
const avatarOptions = ["üê∂", "üê±", "ü¶ä", "üêº", "üêµ", "üêØ", "üê∏"];
const symbolPool = [
  "üçÑ‚Äçüü´","üçÑ‚Äçüü´","üçÑ‚Äçüü´","üçÑ‚Äçüü´","üçÑ‚Äçüü´","üçÑ‚Äçüü´",
  "üçÑ","üçÑ","üçÑ","üçÑ","üçÑ",
  "üçÉ","üçÉ","üçÉ","üçÉ",
  "üö¨","üö¨","üö¨",
  "üíä","üíä",
  "üí®",
  "üåø"
];
const payouts = {
  "üçÑ‚Äçüü´": 20,
  "üçÑ": 24,
  "üçÉ": 28,
  "üö¨": 40,
  "üíä": 60,
  "üí®": 120,
  "üåø": 200
};

let data = {};
try {
  let raw = await Keychain.get(saveKey);
  if (raw) data = JSON.parse(raw);
} catch (e) {}
if (!data.name) {
  const a = new Alert();
  a.title = "Enter your player name";
  a.addTextField("Your name");
  a.addAction("OK");
  await a.present();
  data.name = a.textFieldValue(0) || "Guest";
}
if (!data.avatar) {
  const b = new Alert();
  b.title = "Choose your avatar";
  avatarOptions.forEach(a => b.addAction(a));
  const choice = await b.present();
  data.avatar = avatarOptions[choice];
}

data.balance = data.balance ?? 15000;
data.bet = data.bet ?? 50;
data.freeSpins = data.freeSpins ?? 0;

await Keychain.set(saveKey, JSON.stringify(data));
const isAdmin = data.name === "Jokerr";

const html = `
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1, user-scalable=no">
  <style>
    * { box-sizing: border-box; margin: 0; padding: 0; -webkit-user-select: none; user-select: none; }
    body {
      font-family: -apple-system;
      background: #111;
      color: #fff;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 12px;
    }
    #avatar {
      font-size: 48px;
      margin-top: 10px;
    }
    #playerName {
      font-size: 18px;
      margin-bottom: 8px;
    }
    #topBar {
      font-size: 16px;
      font-weight: bold;
      margin: 6px 0 12px 0;
    }
    #balance {
      transition: color 0.3s;
    }
    #slot {
      display: grid;
      grid-template-columns: repeat(5, 1fr);
      gap: 6px;
      width: 100%;
      max-width: 400px;
      aspect-ratio: 5 / 3;
      margin: 10px 0;
    }
    .cell {
      background-color: #222;
      border-radius: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 32px;
      min-height: 0;
      min-width: 0;
      transition: transform 0.2s, background-color 0.2s;
    }
    .win {
      background-color: #ffd700;
      transform: scale(1.1);
    }
    select, button, input {
      font-size: 16px;
      padding: 6px 10px;
      border-radius: 6px;
      border: none;
      margin: 4px;
    }
    #controls {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 10px;
      margin: 10px 0;
    }
    #message {
      font-weight: bold;
      margin-top: 8px;
      text-align: center;
    }
    #adminPanel {
      display: ${isAdmin ? "block" : "none"};
      margin-top: 12px;
      padding: 8px;
      background: #222;
      border: 1px solid #444;
      border-radius: 8px;
    }
    .adminRow {
      display: flex;
      gap: 6px;
      align-items: center;
      margin-top: 6px;
    }
    #autoBtn {
      width: 80px;
      background-color: red;
      color: white;
    }
    #spinBtn {
      width: 80px;
    }
  </style>
</head>
<body>
  <div id="avatar">${data.avatar}</div>
  <div id="playerName">${data.name}</div>
  <div id="topBar"><div id="balance">Balance: $${data.balance.toLocaleString()}</div></div>
  <div id="slot"></div>
  <div id="controls">
    <button id="autoBtn"></button>
    <button id="spinBtn">Spin</button>
    <select id="betSelector">${[1,5,10,20,50,100,250,500,1000,2500,5000,10000,25000,50000,100000,500000,1000000,5000000,10000000,25000000,50000000,100000000].map(v => `<option value="${v}">$${v.toLocaleString()}</option>`).join('')}<option value="max">Max Bet</option></select>
  </div>
  <div id="message"></div>
  <div id="adminPanel">
    <div><strong>Admin Panel</strong></div>
    <div class="adminRow"><label>Always Win:</label><input type="checkbox" id="alwaysWinToggle" /></div>
    <div class="adminRow"><button onclick="grantFreeSpins()">+50 Spins</button></div>
  </div>
  <script>
    const pool = ${JSON.stringify(symbolPool)};
    const payouts = ${JSON.stringify(payouts)};
    let balance = ${data.balance}, bet = ${data.bet}, freeSpins = ${data.freeSpins}, alwaysWin = false;
    let autoSpin = false, autoSpinTimeout = null;

    const balanceDisplay = document.getElementById("balance");
    const slot = document.getElementById("slot");
    const message = document.getElementById("message");
    const betSelector = document.getElementById("betSelector");
    const autoBtn = document.getElementById("autoBtn");

    function updateAutoBtnStyle() {
      autoBtn.style.backgroundColor = autoSpin ? "green" : "red";
      autoBtn.textContent = autoSpin ? "Auto On" : "Auto Off";
    }

    function updateBalanceDisplay(newVal) {
      const delta = newVal - balance;
      balance = newVal;
      balanceDisplay.textContent = "Balance: $" + balance.toLocaleString();
      balanceDisplay.style.color = delta > 0 ? "#0f0" : (delta < 0 ? "#f33" : "white");
      setTimeout(() => balanceDisplay.style.color = "white", 600);
    }

    function getSymbol() {
      return pool[Math.floor(Math.random() * pool.length)];
    }

    function draw(reels, wins=[]) {
      slot.innerHTML = "";
      for (let y = 0; y < 3; y++) {
        for (let x = 0; x < 5; x++) {
          let cell = document.createElement("div");
          cell.className = "cell";
          cell.textContent = reels[x][y];
          if (wins.some(p => p.x === x && p.y === y)) cell.classList.add("win");
          slot.appendChild(cell);
        }
      }
    }

    async function spinReels() {
      const reels = Array.from({ length: 5 }, () => Array(3).fill(""));
      for (let x = 0; x < 5; x++) {
        for (let t = 0; t < 10 + x * 3; t++) {
          for (let y = 0; y < 3; y++) reels[x][y] = alwaysWin ? "üåø" : getSymbol();
          draw(reels);
          await new Promise(r => setTimeout(r, 50));
        }
      }
      return reels;
    }

    function detectWins(r) {
      const lines = [
        [0,0,1,0,2,0,3,0,4,0],
        [0,1,1,1,2,1,3,1,4,1],
        [0,2,1,2,2,2,3,2,4,2],
        [0,0,1,1,2,2,3,1,4,0],
        [0,2,1,1,2,0,3,1,4,2]
      ];
      const wins = [];
      for (let i of lines) {
        const [x0,y0,x1,y1,x2,y2,x3,y3,x4,y4] = i;
        const s0 = r[x0][y0], s1 = r[x1][y1], s2 = r[x2][y2], s3 = r[x3][y3], s4 = r[x4][y4];
        if (s0 === s1 && s1 === s2 && s2 === s3 && s3 === s4) {
          wins.push({ symbol: s0, matched: [{x:x0,y:y0},{x:x1,y:y1},{x:x2,y:y2},{x:x3,y:y3},{x:x4,y:y4}] });
        }
      }
      return wins;
    }

    async function spin() {
      message.textContent = "";
      let sel = betSelector.value;
      bet = sel === "max" ? balance : parseInt(sel);
      if (freeSpins <= 0 && (bet > balance || bet <= 0)) {
        message.textContent = "Not enough balance.";
        autoSpin = false;
        updateAutoBtnStyle();
        return;
      }
      if (freeSpins > 0) {
        message.textContent = "Free Spin (" + freeSpins + " left)";
        freeSpins--;
      } else updateBalanceDisplay(balance - bet);

      const reels = await spinReels();
      const wins = detectWins(reels);
      let payout = 0;
      let winCells = [];

      for (let w of wins) {
        const mult = payouts[w.symbol] || 10;
        payout += mult * (bet / 10);
        winCells = winCells.concat(w.matched);
      }

      if (payout > 0) {
        updateBalanceDisplay(balance + payout);
        message.textContent = "You won $" + payout.toLocaleString();
        if (wins.some(w => ["üåø","üí®","üçÉ","üíä","üö¨"].includes(w.symbol))) freeSpins += 3;
      } else message.textContent = "No win, try again.";

      draw(reels, winCells);

      if (balance <= 0.9 && freeSpins === 0) {
        freeSpins = 30;
        message.textContent = "You're broke! Here's 10 free spins!";
      }

      save();

      if (autoSpin && balance > 0) autoSpinTimeout = setTimeout(() => spin(), 1000);
    }

    function save() {
      const result = {
        balance, bet, name: "${data.name}", avatar: "${data.avatar}", freeSpins
      };
      window.setTimeout(() => completion(result), 500);
    }

    function grantFreeSpins() {
      freeSpins += 50;
      message.textContent = "+50 free spins!";
    }

    autoBtn.addEventListener("click", () => {
      autoSpin = !autoSpin;
      updateAutoBtnStyle();
      if (autoSpin) spin();
      else if (autoSpinTimeout) clearTimeout(autoSpinTimeout);
    });

    document.getElementById("spinBtn").addEventListener("click", spin);
    document.getElementById("alwaysWinToggle").addEventListener("change", e => alwaysWin = e.target.checked);

    betSelector.value = bet;
    updateBalanceDisplay(balance);
    updateAutoBtnStyle();
    draw(Array.from({length:5},()=>Array.from({length:3},getSymbol)));
  </script>
</body>
</html>
`;

const wv = new WebView();
await wv.loadHTML(html);
const result = await wv.present(true);
if (result && typeof result === 'object') {
  await Keychain.set(saveKey, JSON.stringify(result));
}
