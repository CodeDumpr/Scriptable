// Jokerr's Scriptable Slot Machine (Revised Public Version)

const balanceKey = "slot_balance";
const betKey = "slot_bet";
const nameKey = "slot_player";
const avatarKey = "slot_avatar";

const avatarOptions = ["üê∂", "üê±", "ü¶ä", "üêº", "üêµ", "üêØ", "üê∏"];
const symbolPool = [
  "üçí", "üçí", "üçí", "üçí", "üçí", "üçí",
  "üçã", "üçã", "üçã", "üçã", "üçã",
  "üçâ", "üçâ", "üçâ", "üçâ",
  "üîî", "üîî", "üîî",
  "üíé", "üíé",
  "7Ô∏è‚É£",
  "‚≠ê"
];

const payouts = {
  "üçí": 5,
  "üçã": 6,
  "üçâ": 7,
  "üîî": 10,
  "üíé": 15,
  "7Ô∏è‚É£": 30,
  "‚≠ê": 50
};

let balance = parseInt(await Keychain.get(balanceKey) || "1000");
let bet = parseInt(await Keychain.get(betKey) || "50");
let playerName = await Keychain.get(nameKey);
let avatar = await Keychain.get(avatarKey);

if (!playerName) {
  const alert = new Alert();
  alert.title = "Enter your player name";
  alert.addTextField("Your name");
  alert.addAction("OK");
  await alert.present();
  playerName = alert.textFieldValue(0) || "Guest";
  await Keychain.set(nameKey, playerName);
}

if (!avatar) {
  const avatarAlert = new Alert();
  avatarAlert.title = "Choose your avatar";
  avatarOptions.forEach(a => avatarAlert.addAction(a));
  const choice = await avatarAlert.present();
  avatar = avatarOptions[choice];
  await Keychain.set(avatarKey, avatar);
}

const isAdmin = playerName === "Jokerr";

const html = `<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <style>
    body { font-family: -apple-system; background: #111; color: white; margin: 0; overflow: hidden; display: flex; flex-direction: column; align-items: center; }
    #avatar { font-size: 48px; margin-top: 10px; }
    #playerName { font-size: 18px; }
    #topBar { display: flex; justify-content: space-between; width: 90%; margin-top: 10px; font-size: 16px; }
    #balance { font-weight: bold; transition: color 0.3s; }
    #controls { display: flex; align-items: center; gap: 6px; }
    #slot { display: grid; grid-template-columns: repeat(5, 60px); grid-template-rows: repeat(3, 60px); gap: 6px; margin: 15px auto; }
    .cell { width: 60px; height: 60px; font-size: 40px; display: flex; justify-content: center; align-items: center; background: #222; border-radius: 10px; transition: transform 0.2s, background-color 0.2s; }
    .win { background-color: #ffd700; transform: scale(1.1); }
    select, button, input { font-size: 16px; padding: 5px 10px; border-radius: 6px; border: none; }
    #message { text-align: center; font-weight: bold; margin-top: 10px; }
    #adminPanel { display: ${isAdmin ? "block" : "none"}; margin-top: 10px; padding: 10px; background: #222; border: 1px solid #444; border-radius: 8px; }
    .adminRow { margin-top: 8px; display: flex; gap: 8px; align-items: center; }
  </style>
</head>
<body>
  <div id="avatar">${avatar}</div>
  <div id="playerName">${playerName}</div>
  <div id="topBar">
    <div id="balance">Balance: $${balance.toLocaleString()}</div>
    <div id="controls">
      <select id="betSelector">
        <option value="1">$1</option>
        <option value="5">$5</option>
        <option value="10">$10</option>
        <option value="20">$20</option>
        <option value="50">$50</option>
        <option value="100">$100</option>
        <option value="250">$250</option>
        <option value="500">$500</option>
        <option value="1000">$1,000</option>
        <option value="2500">$2,500</option>
        <option value="5000">$5,000</option>
        <option value="10000">$10,000</option>
        <option value="25000">$25,000</option>
        <option value="50000">$50,000</option>
        <option value="100000">$100,000</option>
        <option value="500000">$500,000</option>
        <option value="1000000">$1,000,000</option>
        <option value="max">Max Bet</option>
      </select>
      <button id="spinBtn">Spin</button>
    </div>
  </div>
  <div id="slot"></div>
  <div id="message"></div>

  <div id="adminPanel">
    <div><strong>Admin Panel</strong></div>
    <div class="adminRow">
      <label>Always Win:</label>
      <input type="checkbox" id="alwaysWinToggle" />
    </div>
    <div class="adminRow">
      <button onclick="grantFreeSpins()">Grant 25 Free Spins</button>
    </div>
  </div>

  <audio id="spinSound" src="https://github.com/CodeDumpr/Scriptable/raw/main/spin.wav" preload="auto"></audio>
  <audio id="winSound" src="https://github.com/CodeDumpr/Scriptable/raw/main/win.wav" preload="auto"></audio>
  <audio id="jackpotSound" src="https://github.com/CodeDumpr/Scriptable/raw/main/jackpot.wav" preload="auto"></audio>

  <script>
    const symbolPool = ${JSON.stringify(symbolPool)};
    const payouts = ${JSON.stringify(payouts)};
    let balance = ${balance}, bet = ${bet};
    let alwaysWin = false;
    let freeSpins = 0;

    const slot = document.getElementById("slot");
    const balanceDisplay = document.getElementById("balance");
    const message = document.getElementById("message");
    const betSelector = document.getElementById("betSelector");

    const spinSound = document.getElementById("spinSound");
    const winSound = document.getElementById("winSound");
    const jackpotSound = document.getElementById("jackpotSound");

    function updateBalanceDisplay(newVal) {
      const delta = newVal - balance;
      const color = delta > 0 ? "#0f0" : (delta < 0 ? "#f33" : "white");
      balanceDisplay.style.color = color;
      balance = newVal;
      balanceDisplay.textContent = "Balance: $" + balance.toLocaleString();
      setTimeout(() => balanceDisplay.style.color = "white", 600);
    }

    function getRandomSymbol() {
      return symbolPool[Math.floor(Math.random() * symbolPool.length)];
    }

    function drawReels(reels, winningCells = []) {
      slot.innerHTML = "";
      for (let y = 0; y < 3; y++) {
        for (let x = 0; x < 5; x++) {
          const div = document.createElement("div");
          div.className = "cell";
          div.dataset.row = y;
          div.dataset.col = x;
          div.textContent = reels[x][y];
          if (winningCells.some(p => p.x === x && p.y === y)) div.classList.add("win");
          slot.appendChild(div);
        }
      }
    }

    async function spinReels() {
  spinSound.play();
  const reels = Array.from({ length: 5 }, () => Array(3).fill(""));

  for (let x = 0; x < 5; x++) {
    for (let t = 0; t < 10 + x * 3; t++) {
      for (let y = 0; y < 3; y++) {
        if (alwaysWin) {
          // Guarantee high payout symbol in all lines
          const symbols = ["‚≠ê", "7Ô∏è‚É£", "üíé"];
          reels[x][y] = symbols[Math.floor(Math.random() * symbols.length)];
        } else {
          reels[x][y] = getRandomSymbol();
        }
      }
      drawReels(reels);
      await new Promise(r => setTimeout(r, 50));
    }
  }

  if (alwaysWin) {
    // Overwrite center line with guaranteed matching high-value symbol
    const forceSymbol = "‚≠ê";
    for (let x = 0; x < 5; x++) {
      reels[x][1] = forceSymbol;
    }

    // Also overwrite a diagonal for extra win
    for (let i = 0; i < 5; i++) {
      reels[i][i < 3 ? i : 4 - i] = forceSymbol;
    }
  }

  return reels;
}

    function detectWins(reels) {
      const lines = [
        [{x:0,y:0},{x:1,y:0},{x:2,y:0},{x:3,y:0},{x:4,y:0}],
        [{x:0,y:1},{x:1,y:1},{x:2,y:1},{x:3,y:1},{x:4,y:1}],
        [{x:0,y:2},{x:1,y:2},{x:2,y:2},{x:3,y:2},{x:4,y:2}],
        [{x:0,y:0},{x:1,y:1},{x:2,y:2},{x:3,y:1},{x:4,y:0}],
        [{x:0,y:2},{x:1,y:1},{x:2,y:0},{x:3,y:1},{x:4,y:2}]
      ];
      const wins = [];
      for (let line of lines) {
        const first = reels[line[0].x][line[0].y];
        const matched = [line[0]];
        for (let i = 1; i < line.length; i++) {
          const {x, y} = line[i];
          if (reels[x][y] === first) matched.push({x, y});
          else break;
        }
        if (matched.length >= 3) wins.push({symbol: first, matched});
      }
      return wins;
    }

    function getPayout(symbol, count) {
      return (payouts[symbol] || 10) * count;
    }

    async function spin(auto = false) {
      message.textContent = "";
      let selected = betSelector.value;
      bet = selected === "max" ? balance : parseInt(selected);

      if (freeSpins <= 0 && (bet > balance || bet <= 0)) {
        message.textContent = "Not enough balance.";
        return;
      }

      if (freeSpins > 0) {
        bet = 5000;
        message.textContent = "Free Spin (" + freeSpins + " remaining)...";
        await new Promise(r => setTimeout(r, 1000));
        freeSpins--;
      } else {
        updateBalanceDisplay(balance - bet);
      }

      const reels = await spinReels();
      const wins = detectWins(reels);
      let totalPayout = 0;
      let winCells = [];

      for (let win of wins) {
        const payout = getPayout(win.symbol, win.matched.length) * (bet / 10);
        totalPayout += payout;
        winCells = winCells.concat(win.matched);
      }

      if (totalPayout > 0) {
        message.textContent = \`You won $\${totalPayout.toLocaleString()}!\`;
        (totalPayout >= 5000 ? jackpotSound : winSound).play();
        updateBalanceDisplay(balance + totalPayout);
        if (wins.some(w => w.symbol === "‚≠ê" && w.matched.length >= 3)) {
          freeSpins += 3;
        }
      } else {
        message.textContent = "No win, try again!";
      }

      drawReels(reels, winCells);

      if (balance <= 0 && freeSpins === 0) {
        freeSpins = 10;
        message.textContent = "You're broke! Here's 10 free spins!";
      }

      if (freeSpins > 0) {
        setTimeout(() => spin(true), 1000);
      }
    }

    function grantFreeSpins() {
      freeSpins += 25;
      message.textContent = "Granted 25 free spins!";
    }

    document.getElementById("spinBtn").addEventListener("click", () => spin(false));
    if (![...betSelector.options].some(opt => opt.value === bet.toString())) {
  bet = 50;
}
betSelector.value = bet;
    document.getElementById("alwaysWinToggle")?.addEventListener("change", e => {
      alwaysWin = e.target.checked;
    });

    const initialReels = Array.from({ length: 5 }, () => Array.from({ length: 3 }, () => getRandomSymbol()));
    drawReels(initialReels);
    updateBalanceDisplay(balance);
  </script>
</body>
</html>`;

const wv = new WebView();
await wv.loadHTML(html);
const result = await wv.present(true);

if (result && typeof result === 'object') {
  if (result.balance !== undefined) {
    await Keychain.set(balanceKey, result.balance.toString());
  }
  if (result.bet !== undefined) {
    await Keychain.set(betKey, result.bet.toString());
  }
}
