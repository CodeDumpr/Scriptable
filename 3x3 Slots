// Jokerr's 3x3 Slot Machine (Simplified Version)
const saveKey = "slot_data_v4";
const avatarOptions = ["🐶", "🐱", "🦊", "🐼", "🐵", "🐯", "🐸"];
const symbolPool = [
  "🪙","🪙","🪙","🪙","🪙",
  "🍋","🍋","🍋","🍋",
  "🔔","🔔","🔔",
  "🍉","🍉",
  "🍒",
  "7️⃣",
  "💎"
];
const payouts = {
  "🪙": [0, 2, 10, 50],
  "🍋": [0, 3, 15, 75],
  "🔔": [0, 5, 25, 100],
  "🍉": [0, 10, 50, 200],
  "🍒": [0, 15, 75, 300],
  "7️⃣": [0, 25, 100, 500],
  "💎": [0, 50, 200, 1000]
};

async function loadGameState() {
  try {
    const raw = await Keychain.get(saveKey);
    return raw ? JSON.parse(raw) : {};
  } catch (e) {
    console.log("Load error:", e);
    return {};
  }
}

async function saveGameState(newData) {
  try {
    const existing = await loadGameState();
    const merged = {
      ...existing,
      ...newData,
      balance: Number(newData.balance) || existing.balance || 15000,
      bet: Number(newData.bet) || existing.bet || 50,
      name: newData.name || existing.name || "Guest",
      avatar: newData.avatar || existing.avatar || "🐵"
    };
    await Keychain.set(saveKey, JSON.stringify(merged));
    return true;
  } catch (e) {
    console.log("Save error:", e);
    return false;
  }
}

let data = await loadGameState();

// Player setup if new
if (!data.name) {
  const a = new Alert();
  a.title = "Enter your player name";
  a.addTextField("Your name");
  a.addAction("OK");
  await a.present();
  data.name = a.textFieldValue(0) || "Guest";
}

if (!data.avatar) {
  const b = new Alert();
  b.title = "Choose your avatar";
  avatarOptions.forEach(a => b.addAction(a));
  const choice = await b.present();
  data.avatar = avatarOptions[choice];
}

// Set defaults
data.balance = data.balance ?? 15000;
data.bet = data.bet ?? 50;

const isAdmin = data.name === "Jokerr";

const html = `
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1, user-scalable=no">
  <style>
    * { box-sizing: border-box; margin: 0; padding: 0; -webkit-user-select: none; user-select: none; }
    body {
      font-family: -apple-system;
      background: #111;
      color: #fff;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 12px;
    }
    #avatar {
      font-size: 48px;
      margin-top: 10px;
    }
    #playerName {
      font-size: 18px;
      margin-bottom: 8px;
    }
    #topBar {
      font-size: 16px;
      font-weight: bold;
      margin: 6px 0 12px 0;
    }
    #balance {
      transition: color 0.3s;
    }
    #slot {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 6px;
      width: 100%;
      max-width: 300px;
      aspect-ratio: 1;
      margin: 10px 0;
    }
    .cell {
      background-color: #222;
      border-radius: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 42px;
      transition: transform 0.2s, background-color 0.2s;
    }
    .win {
      background-color: #ffd700;
      transform: scale(1.1);
    }
    select, button, input {
      font-size: 16px;
      padding: 6px 10px;
      border-radius: 6px;
      border: none;
      margin: 4px;
    }
    #controls {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 10px;
      margin: 10px 0;
    }
    #message {
      font-weight: bold;
      margin-top: 8px;
      text-align: center;
      min-height: 40px;
    }
    #adminPanel {
      display: ${isAdmin ? "block" : "none"};
      margin-top: 12px;
      padding: 8px;
      background: #222;
      border: 1px solid #444;
      border-radius: 8px;
    }
    .adminRow {
      display: flex;
      gap: 6px;
      align-items: center;
      margin-top: 6px;
    }
    #spinBtn {
      width: 80px;
      background-color: #4CAF50;
      color: white;
    }
    button:disabled {
      opacity: 0.5;
    }
    .cheat-active {
      box-shadow: 0 0 10px gold;
    }
  </style>
</head>
<body>
  <div id="avatar">${data.avatar}</div>
  <div id="playerName">${data.name}</div>
  <div id="topBar"><div id="balance">Balance: $${data.balance.toLocaleString()}</div></div>
  <div id="slot"></div>
  <div id="controls">
    <button id="spinBtn">Spin</button>
    <select id="betSelector">${[1,5,10,20,50,100,250,500,1000,2500,5000,10000,25000,50000,100000,500000,1000000,5000000,10000000,25000000,50000000,100000000].map(v => `<option ${data.bet === v ? "selected" : ""} value="${v}">$${v.toLocaleString()}</option>`).join('')}<option value="max">Max Bet</option></select>
  </div>
  <div id="message"></div>
  <div id="adminPanel">
    <div><strong>Admin Panel</strong></div>
    <div class="adminRow"><label>Always Win:</label><input type="checkbox" id="alwaysWinToggle" /></div>
    <div class="adminRow"><button onclick="addCoins()">+$1000</button></div>
  </div>
  <script>
    const pool = ${JSON.stringify(symbolPool)};
    const payouts = ${JSON.stringify(payouts)};
    let balance = ${data.balance}, bet = ${data.bet}, alwaysWin = false;
    let isSpinning = false;
    let lastSaveTime = 0;

    const balanceDisplay = document.getElementById("balance");
    const slot = document.getElementById("slot");
    const message = document.getElementById("message");
    const betSelector = document.getElementById("betSelector");
    const spinBtn = document.getElementById("spinBtn");
    const alwaysWinToggle = document.getElementById("alwaysWinToggle");

    function updateBalanceDisplay(newVal) {
      const delta = newVal - balance;
      balance = newVal;
      balanceDisplay.textContent = "Balance: $" + balance.toLocaleString();
      balanceDisplay.style.color = delta > 0 ? "#0f0" : (delta < 0 ? "#f33" : "white");
      setTimeout(() => balanceDisplay.style.color = "white", 600);
    }

    function getSymbol() {
      return pool[Math.floor(Math.random() * pool.length)];
    }

    function draw(reels, wins=[]) {
      slot.innerHTML = "";
      
      for (let y = 0; y < 3; y++) {
        for (let x = 0; x < 3; x++) {
          let cell = document.createElement("div");
          cell.className = "cell";
          cell.textContent = reels[x][y];
          if (wins.some(p => p.x === x && p.y === y)) cell.classList.add("win");
          slot.appendChild(cell);
        }
      }
    }

    async function spinReels() {
      isSpinning = true;
      spinBtn.disabled = true;
      const reels = Array.from({ length: 3 }, () => Array(3).fill(""));
      
      for (let t = 0; t < 15; t++) {
        for (let x = 0; x < 3; x++) {
          for (let y = 0; y < 3; y++) {
            reels[x][y] = (alwaysWin && t === 14) ? "💎" : getSymbol();
          }
        }
        draw(reels);
        await new Promise(r => setTimeout(r, 50 + t * 5));
      }
      
      isSpinning = false;
      spinBtn.disabled = false;
      return reels;
    }

    function detectWins(reels) {
      const wins = [];
      const winCells = [];
      
      // Check horizontal lines
      for (let y = 0; y < 3; y++) {
        if (reels[0][y] === reels[1][y] && reels[1][y] === reels[2][y]) {
          const symbol = reels[0][y];
          const payout = payouts[symbol]?.[2] || 0;
          if (payout > 0) {
            wins.push({
              symbol: symbol,
              amount: payout * (bet / 10)
            });
            winCells.push(...[[0,y], [1,y], [2,y]].map(([x,y]) => ({x,y})));
          }
        }
      }
      
      // Check vertical lines (if you want)
      for (let x = 0; x < 3; x++) {
        if (reels[x][0] === reels[x][1] && reels[x][1] === reels[x][2]) {
          const symbol = reels[x][0];
          const payout = payouts[symbol]?.[2] || 0;
          if (payout > 0) {
            wins.push({
              symbol: symbol,
              amount: payout * (bet / 10)
            });
            winCells.push(...[[x,0], [x,1], [x,2]].map(([x,y]) => ({x,y})));
          }
        }
      }
      
      // Check diagonals
      if (reels[0][0] === reels[1][1] && reels[1][1] === reels[2][2]) {
        const symbol = reels[0][0];
        const payout = payouts[symbol]?.[2] || 0;
        if (payout > 0) {
          wins.push({
            symbol: symbol,
            amount: payout * (bet / 10)
          });
          winCells.push(...[[0,0], [1,1], [2,2]].map(([x,y]) => ({x,y})));
        }
      }
      
      if (reels[2][0] === reels[1][1] && reels[1][1] === reels[0][2]) {
        const symbol = reels[2][0];
        const payout = payouts[symbol]?.[2] || 0;
        if (payout > 0) {
          wins.push({
            symbol: symbol,
            amount: payout * (bet / 10)
          });
          winCells.push(...[[2,0], [1,1], [0,2]].map(([x,y]) => ({x,y})));
        }
      }
      
      return { wins, winCells };
    }

    async function spin() {
      if (isSpinning) return;
      
      message.textContent = "";
      let sel = betSelector.value;
      bet = sel === "max" ? balance : parseInt(sel);
      if (bet > balance || bet <= 0) {
        message.textContent = "Not enough balance.";
        return;
      }
      
      updateBalanceDisplay(balance - bet);

      const reels = await spinReels();
      const { wins, winCells } = detectWins(reels);
      let totalPayout = wins.reduce((sum, win) => sum + win.amount, 0);

      if (totalPayout > 0) {
        updateBalanceDisplay(balance + totalPayout);
        message.textContent = "You won $" + totalPayout.toLocaleString() + "!";
      } else {
        message.textContent = "No win, try again.";
      }

      draw(reels, winCells);
      save();
    }

    function save() {
      const now = Date.now();
      if (now - lastSaveTime < 1000) return;
      lastSaveTime = now;
      
      const result = {
        balance, 
        bet,
        name: "${data.name}", 
        avatar: "${data.avatar}", 
        lastSave: new Date().toISOString()
      };
      window.webkit.messageHandlers.scriptable.postMessage({
        type: "save",
        data: result
      });
    }

    function addCoins() {
      updateBalanceDisplay(balance + 15000);
      save();
    }

    alwaysWinToggle.addEventListener("change", function(e) {
      alwaysWin = e.target.checked;
      document.getElementById("adminPanel").classList.toggle("cheat-active", alwaysWin);
      save();
    });

    spinBtn.addEventListener("click", spin);
    betSelector.value = bet;
    updateBalanceDisplay(balance);
    draw(Array.from({length:3},()=>Array.from({length:3},getSymbol)));
  </script>
</body>
</html>
`;

const wv = new WebView();
await wv.loadHTML(html);

wv.messageHandlers = {
  async save(message) {
    if (message.type === "save") {
      await saveGameState(message.data);
    }
  }
};

const result = await wv.present(true);
if (result) {
  await saveGameState(result);
}