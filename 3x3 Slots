// Jokerr's Scriptable Slot Machine (Auto Spin UI Tweaked)

const saveKey = "slot_data";
const avatarOptions = ["üê∂", "üê±", "ü¶ä", "üêº", "üêµ", "üêØ", "üê∏"];
const symbolPool = [
  "üçÑ‚Äçüü´","üçÑ‚Äçüü´","üçÑ‚Äçüü´","üçÑ‚Äçüü´","üçÑ‚Äçüü´","üçÑ‚Äçüü´",
  "üçÑ","üçÑ","üçÑ","üçÑ","üçÑ",
  "üçÉ","üçÉ","üçÉ","üçÉ",
  "üö¨","üö¨","üö¨",
  "üíä","üíä",
  "üí®",
  "üåø"
];
const payouts = {
  "üçÑ‚Äçüü´": 20,
  "üçÑ": 24,
  "üçÉ": 28,
  "üö¨": 40,
  "üíä": 60,
  "üí®": 120,
  "üåø": 200
};

let data = {};
try {
  let raw = await Keychain.get(saveKey);
  if (raw) data = JSON.parse(raw);
} catch (e) {}
if (!data.name) {
  const a = new Alert();
  a.title = "Enter your player name";
  a.addTextField("Your name");
  a.addAction("OK");
  await a.present();
  data.name = a.textFieldValue(0) || "Guest";
}
if (!data.avatar) {
  const b = new Alert();
  b.title = "Choose your avatar";
  avatarOptions.forEach(a => b.addAction(a));
  const choice = await b.present();
  data.avatar = avatarOptions[choice];
}

data.balance = data.balance ?? 15000;
data.bet = data.bet ?? 50;
data.freeSpins = data.freeSpins ?? 0;

await Keychain.set(saveKey, JSON.stringify(data));
const isAdmin = data.name === "Jokerr";

const html = `
<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
  <style>
    * { -webkit-user-select: none; -webkit-touch-callout: none; user-select: none; }
    body { font-family: -apple-system; background: #111; color: white; margin: 0; display: flex; flex-direction: column; align-items: center; }
    #avatar { font-size: 48px; margin-top: 10px; }
    #playerName { font-size: 18px; }
    #topBar { display: flex; justify-content: center; width: 90%; margin-top: 10px; font-size: 16px; }
    #balance { font-weight: bold; transition: color 0.3s; }
    #slot { display: grid; grid-template-columns: repeat(3, 80px); grid-template-rows: repeat(3, 80px); gap: 6px; margin: 15px auto; }
    .cell { width: 80px; height: 80px; font-size: 48px; display: flex; justify-content: center; align-items: center; background: #222; border-radius: 10px; transition: transform 0.2s, background-color 0.2s; }
    .win { background-color: #ffd700; transform: scale(1.1); }
    select, button, input { font-size: 16px; padding: 5px 10px; border-radius: 6px; border: none; }
    #controls { display: flex; justify-content: center; flex-wrap: wrap; gap: 10px; margin-bottom: 10px; }
    #message { text-align: center; font-weight: bold; margin-bottom: 10px; }
    #adminPanel { display: ${isAdmin ? "block" : "none"}; margin-top: 0px; padding: 10px; background: #222; border: 1px solid #444; border-radius: 8px; }
    .adminRow { margin-top: 8px; display: flex; gap: 8px; align-items: center; }
    #autoBtn { width: 80px; background-color: red; color: white; }
    #spinBtn { width: 80px; }
  </style>
</head>
<body>
  <div id="avatar">${data.avatar}</div>
  <div id="playerName">${data.name}</div>
  <div id="topBar">
    <div id="balance">Balance: $${data.balance.toLocaleString()}</div>
  </div>
  <div id="slot"></div>

  <div id="controls">
    <button id="autoBtn"></button>
    <button id="spinBtn">Spin</button>
    <select id="betSelector">${[1,5,10,20,50,100,250,500,1000,2500,5000,10000,25000,50000,100000,500000,1000000,5000000,10000000,25000000,50000000,100000000].map(v => `<option value="${v}">$${v.toLocaleString()}</option>`).join('')}<option value="max">Max Bet</option></select>
  </div>
  
  <div id="message"></div>

  <div id="adminPanel">
    <div><strong>Admin Panel</strong></div>
    <div class="adminRow"><label>Always Win:</label><input type="checkbox" id="alwaysWinToggle" /></div>
    <div class="adminRow"><button onclick="grantFreeSpins()">+50 Spins</button></div>
  </div>

  <script>
    const pool = ${JSON.stringify(symbolPool)};
    const payouts = ${JSON.stringify(payouts)};
    let balance = ${data.balance}, bet = ${data.bet}, freeSpins = ${data.freeSpins}, alwaysWin = false;
    let autoSpin = false, autoSpinTimeout = null;

    const balanceDisplay = document.getElementById("balance");
    const slot = document.getElementById("slot");
    const message = document.getElementById("message");
    const betSelector = document.getElementById("betSelector");
    const autoBtn = document.getElementById("autoBtn");

    function updateAutoBtnStyle() {
      autoBtn.style.backgroundColor = autoSpin ? "green" : "red";
      autoBtn.textContent = autoSpin ? "Auto On" : "Auto Off";
    }

    function updateBalanceDisplay(newVal) {
      const delta = newVal - balance;
      balance = newVal;
      balanceDisplay.textContent = "Balance: $" + balance.toLocaleString();
      balanceDisplay.style.color = delta > 0 ? "#0f0" : (delta < 0 ? "#f33" : "white");
      setTimeout(() => balanceDisplay.style.color = "white", 600);
    }

    function getSymbol() {
      return pool[Math.floor(Math.random() * pool.length)];
    }

    function draw(reels, wins=[]) {
      slot.innerHTML = "";
      for (let y=0; y<3; y++) for (let x=0; x<3; x++) {
        let cell = document.createElement("div");
        cell.className = "cell";
        cell.textContent = reels[x][y];
        if (wins.some(p => p.x === x && p.y === y)) cell.classList.add("win");
        slot.appendChild(cell);
      }
    }

    async function spinReels() {
      const reels = Array.from({ length: 3 }, () => Array(3).fill(""));
      for (let x = 0; x < 3; x++) {
        for (let t = 0; t < 10 + x * 3; t++) {
          for (let y = 0; y < 3; y++) reels[x][y] = alwaysWin ? "üåø" : getSymbol();
          draw(reels);
          await new Promise(r => setTimeout(r, 50));
        }
      }
      return reels;
    }

    function detectWins(r) {
      const lines = [[0,0,1,0,2,0],[0,1,1,1,2,1],[0,2,1,2,2,2],[0,0,1,1,2,2],[0,2,1,1,2,0]];
      const wins = [];
      for (let i of lines) {
        const a = r[i[0]][i[1]], b = r[i[2]][i[3]], c = r[i[4]][i[5]];
        if (a === b && b === c) wins.push({ symbol: a, matched: [{x:i[0],y:i[1]},{x:i[2],y:i[3]},{x:i[4],y:i[5]}] });
      }
      return wins;
    }

    async function spin() {
      message.textContent = "";
      let sel = betSelector.value;
      bet = sel === "max" ? balance : parseInt(sel);
      if (freeSpins <= 0 && (bet > balance || bet <= 0)) {
        message.textContent = "Not enough balance.";
        autoSpin = false;
        updateAutoBtnStyle();
        return;
      }
      if (freeSpins > 0) {
        message.textContent = "Free Spin (" + freeSpins + " left)";
        freeSpins--;
      } else updateBalanceDisplay(balance - bet);

      const reels = await spinReels();
      const wins = detectWins(reels);
      let payout = 0;
      let winCells = [];

      for (let w of wins) {
        const mult = payouts[w.symbol] || 10;
        payout += mult * (bet / 10);
        winCells = winCells.concat(w.matched);
      }

      if (payout > 0) {
        updateBalanceDisplay(balance + payout);
        message.textContent = "You won $" + payout.toLocaleString();
        if (wins.some(w => ["üåø","üí®","üçÉ","üíä","üö¨"].includes(w.symbol))) freeSpins += 3;
      } else message.textContent = "No win, try again.";

      draw(reels, winCells);

      if (balance <= 0.9 && freeSpins === 0) {
        freeSpins = 30;
        message.textContent = "You're broke! Here's 30 free spins!";
      }

      save();

      if (autoSpin && balance > 0) autoSpinTimeout = setTimeout(() => spin(), 1000);
    }

    function save() {
      const result = {
        balance, bet, name: "${data.name}", avatar: "${data.avatar}", freeSpins
      };
      window.setTimeout(() => completion(result), 500);
    }

    function grantFreeSpins() {
      freeSpins += 50;
      message.textContent = "+50 free spins!";
    }

    autoBtn.addEventListener("click", () => {
      autoSpin = !autoSpin;
      updateAutoBtnStyle();
      if (autoSpin) spin();
      else if (autoSpinTimeout) clearTimeout(autoSpinTimeout);
    });

    document.getElementById("spinBtn").addEventListener("click", spin);
    document.getElementById("alwaysWinToggle").addEventListener("change", e => alwaysWin = e.target.checked);

    betSelector.value = bet;
    updateBalanceDisplay(balance);
    updateAutoBtnStyle();
    draw(Array.from({length:3},()=>Array.from({length:3},getSymbol)));
  </script>
</body>
</html>`;

// WebView interaction
const wv = new WebView();
await wv.loadHTML(html);
const result = await wv.present(true);
if (result && typeof result === 'object') {
  await Keychain.set(saveKey, JSON.stringify(result));
}
